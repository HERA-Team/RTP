[dbinfo]

username = test
password = testme
hostip   = 127.0.0.1
port     = 5432
dbtype   = postgresql
dbname   = test

[WorkFlowTest]
# Ignored for now
actions = Do1, Do2, Do3
prioritize_obs = 0
neighbors = 0

[WorkFlow]

### 
# prioritize_obs : 0 or 1, disabled by default
# if enabled ( prioritize_obs = 1 ) we will make use the priority scheduling function Scheduler.determine_priority
# this is mainly used with the neighbors = 1 option and attempts to prioritize neighbors first 
###

prioritize_obs = 1

### 
# neighbors : 0 or 1, by default this is disabled, set = 1 to enable 
# If enabled we need to ensure we check to see if any other obsid's need to be processed
# before proceeding, if this is enabled the config option actions_end_file will be 
# used for cases where all the neighbors to a obsid have already been processed
###
neighbors = 1

### 
# actions : comma seperated list of actions this workflow will perform in order
# Should leave off any NEW or COMPLETE actions, the system auto takes care of these, nothing is run on
# either the NEW or COMPLETE state, they are for internal tracking
###
actions = UV_POT,UV,UVC,CLEAN_UV,UVCR,CLEAN_UVC,ACQUIRE_NEIGHBORS,UVCRE,NPZ,UVCRR,NPZ_POT,CLEAN_UVCRE,UVCRRE,CLEAN_UVCRR,CLEAN_NPZ,CLEAN_NEIGHBORS,UVCRRE_POT,CLEAN_UVCRRE,CLEAN_UVCR

### 
# actions_endfile :  only used when neighbors = 1
# This actions list will be used for an obsid after all of its neighbors have been processed
###
actions_endfile = UV_POT, UV, UVC, CLEAN_UV, UVCR, CLEAN_UVC, CLEAN_UVCR

### 
# prereqs : Add Prerequisites that neighbors must meet before proceeding to perform the specified action.  
# Example below adds the prereqs UVCR and CLEAN_UVCR to the ACQUIRE_NEIGHBORS action.
# In order for a obsid to proceed onto ACQUIRE_NEIGHBORS all of its neighbors need to 
# be in either the UVCR or CLEAN_UVCR state
###

[ACQUIRE_NEIGHBORS]
prereqs = UVCR, CLEAN_UVCR
# args, Execute in python with exec function, this will be what is passed as the arguments to this actions do_script
args = ['%s:%s/%s' % (n[0], n[1], n[-1] + 'cR') for n in neighbors if n[0] != stillhost or n[1] != stillpath]

[CLEAN_NEIGHBORS]
args =  [n[-1] + 'cR' for n in neighbors if n[0] != stillhost]

[CLEAN_UVCR]
prereqs = UVCRRE

[UV]
prereqs = UVCRRE
